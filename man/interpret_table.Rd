% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/service.R
\name{interpret_table}
\alias{interpret_table}
\title{Interpret a summary table and generate a Word report}
\usage{
interpret_table(
  file_path,
  output_file,
  context = "For a research paper",
  language = "en",
  verbosity = "moderate",
  instructions = "",
  varriabes_for_stats = NA,
  model = "gpt-4o",
  formality = 0.2,
  ai_key
)
}
\arguments{
\item{file_path}{Character scalar. Path to the input CSV file.}

\item{output_file}{Character scalar. Path to the output Word file
(should end with `.docx`).}

\item{context}{Character scalar. High-level context for the LLM prompt
(e.g., "For a research paper").}

\item{language}{Character scalar. Output language code or name (e.g., "en").}

\item{verbosity}{Character scalar. Desired verbosity of the LLM response.}

\item{instructions}{Character scalar. Any special instructions to pass through.}

\item{varriabes_for_stats}{Character vector of variable names to keep in the
short table, or `NA` to keep all variables (note the original parameter
spelling is preserved).}

\item{model}{Character scalar. Model name for `openai::create_chat_completion()`.}

\item{formality}{Numeric scalar in \[0, 1\]. Passed to `temperature`.}

\item{ai_key}{Character scalar. OpenAI API key.}
}
\value{
Character scalar: the generated interpretation text.
}
\description{
Reads a CSV file, builds a grouped descriptive table with
`gtsummary::tbl_summary()`, optionally narrows the table to a set of
variables, asks an LLM to draft an interpretation, and saves a .docx
report containing the table and the generated narrative.
}
\details{
The input CSV is expected to contain a column named `group`, which is
used for the `by = group` argument in `gtsummary::tbl_summary()`.
This function assumes required packages are installed and accessible.
}
\examples{
\dontrun{
out <- interpret_table(
  file_path = "data/example.csv",
  output_file = "report.docx",
  context = "For a research paper",
  language = "en",
  verbosity = "moderate",
  instructions = "",
  varriabes_for_stats = NA,
  model = "gpt-4o",
  formality = 0.2,
  ai_key = Sys.getenv("OPENAI_API_KEY")
)
}

}
