% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/service.R
\name{interpret_table_v2}
\alias{interpret_table_v2}
\title{Interpret a gtsummary table and return an LLM-written narrative}
\usage{
interpret_table_v2(
  table_input = opt[1:10, 1:10],
  by,
  context = "For a research paper",
  language = "en",
  verbosity = "moderate",
  instructions = "",
  varriabes_for_stats = c(),
  model = "gpt-4o",
  formality = 0.2,
  ai_key = "Evgeny"
)
}
\arguments{
\item{table_input}{A data.frame or tibble containing the data to summarize.
The default illustrates subsetting (`opt[1:10, 1:10]`) and assumes `opt`
exists in the calling environment.}

\item{by}{Character scalar: name of the grouping column present in `table_input`.}

\item{context}{Character scalar giving high-level context for the LLM (e.g., "For a research paper").}

\item{language}{Character scalar specifying the output language (e.g., "en").}

\item{verbosity}{Character scalar describing how verbose the LLM output should be.}

\item{instructions}{Character scalar with any special instructions for the LLM.}

\item{varriabes_for_stats}{Character vector of column names to include in the summary;
if length is 1, the current code interprets this as "use all columns".
(Original parameter spelling preserved.)}

\item{model}{Character scalar model name passed to `openai::create_chat_completion()`.}

\item{formality}{Numeric scalar in [0, 1], passed to `temperature`.}

\item{ai_key}{Character scalar OpenAI API key. If equal to `"Evgeny"` (default),
the function reads the key from a local file `"ai_key.txt"`.}
}
\value{
Character scalar with the generated interpretation text.
}
\description{
Builds a grouped descriptive table from an in-memory data frame or tibble
with `gtsummary::tbl_summary()`, optionally limits interpretation to a set
of variables, requests a textual interpretation from an LLM, and returns the
generated text. This variant accepts a pre-built table input rather than a file.
}
\details{
The input data must contain a grouping column named by `by`. The summary is built
with `gtsummary::tbl_summary(by = by, include = varriabes_for_stats)`, followed by
`add_p()` and `bold_labels()`. The resulting table is converted to text and sent
to the LLM for interpretation.
}
\examples{
\dontrun{
interpret_table_v2(
  table_input = iris,
  by = "Species",
  varriabes_for_stats = names(iris),
  language = "en",
  context = "For a research paper",
  ai_key = Sys.getenv("OPENAI_API_KEY")
)
}

}
